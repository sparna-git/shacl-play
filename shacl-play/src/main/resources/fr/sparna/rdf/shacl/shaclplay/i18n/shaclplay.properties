# app name in the title
window.app=SHACL Play!


### Navbar and Home ###


# navbar labels, also used in home page cards
navbar.brand=SHACL Play!
navbar.menu1=SHACL
navbar.menu1.doc.label=Generate documentation
navbar.menu1.doc.tooltip=Generate application-profile style documentation, with tables of allowed properties for each class, from your SHACL definition. Ready to be shipped to the developers !
navbar.menu1.draw.label=Draw UML diagrams
navbar.menu1.draw.tooltip=Looking for something more visual ? Generate UML diagrams in SVG from your SHACL file ! Works with PlantUML.
navbar.menu1.context.label=Generate JSON-LD @context
navbar.menu1.context.tooltip=Derive JSON keys from node shapes and property shapes in your SHACL specification
navbar.menu1.sparql.label=Generate SPARQL queries
navbar.menu1.sparql.tooltip=Generate queries to extract a subset of a larger dataset conforming to a SHACL specification.
navbar.menu1.shaclexcel.label=Edit SHACL (in Excel)
navbar.menu1.shaclexcel.tooltip=Create SHACL specifications from an Excel file template
navbar.menu1.shapes-catalog.label=Shapes Catalog
navbar.menu1.shapes-catalog.tooltip=The SHACL catalog is a curated set of online reusable SHACL files. Add yours !
navbar.menu2=RDF Dataset
navbar.menu2.validate.label=Validate RDF against SHACL
navbar.menu2.validate.tooltip=Get a human-readable report from a SHACL validation. Upload your RDF or validate online RDF file at some URL. Also download a CSV report, or raw SHACL Turtle report.
navbar.menu2.generate.label=Generate SHACL from RDF
navbar.menu2.generate.tooltip=Derive a SHACL profile automatically by analysing the structure of an RDF graph. Upload your RDF or analyse the content of a SPARQL endpoint.
navbar.menu2.badge.label=Get validation badges
navbar.menu2.badge.tooltip=If your Shape file is registered in the Shapes catalog and you validate an online file, get Markdown or URL code to display a validation badge on your Github project !
navbar.menu3=SHACL Rules
navbar.menu3.from-owl.label=Apply rules on an RDF dataset
navbar.menu3.from-owl.tooltip=So you have an OWL file and you would like to derive SHACL from it ? use the OWL-to-SHACL conversion rules to generate your SHACL constraint file, or apply custom conversion rules.
navbar.menu3.rules.label=Generate rules documentation
navbar.menu3.rules.tooltip=Generate an HTML documentation from a SHACL rules files
navbar.menu3.rules-catalog.label=SHACL Rules catalog
navbar.menu3.rules-catalog.tooltip=The SHACL rules catalog is a curated set of online reusable SHACL rules files. Add yours !


# home labels
home.shortdesc=Free online suite of tools from <a href="http://sparna.fr/">Sparna</a> to work with <a href="https://www.w3.org/TR/shacl/" target="_blank">SHACL</a>. SHACL Play! embeds <a href="https://github.com/TopQuadrant/shacl" target="_blank">TopBraid SHACL API</a> from <a href="https://www.topquadrant.com/" target="_blank">TopQuadrant</a>.
home.card1.title=SHACL tools
home.card1.description=Utilities for your SHACL specification: generate a documentation, a UML diagram, a JSON-LD context, SPARQL queries.
home.card2.title=RDF dataset tools
home.card2.description=Utilities for an RDF dataset: assess the conformity against a SHACL spec, or derive automatically a SHACL profile from an RDF dataset.
home.card3.title=SHACL rules tools
home.card3.description=Utilities for your SHACL rules : apply rules on a dataset, generate a documentation.


### Blockquotes labels, reusable in multiple pages ###

# Shape selection blockquote labels
blockquote.shapes.upload=Upload
blockquote.shapes.upload.select=Select file
blockquote.shapes.upload.change=Change
blockquote.shapes.upload.remove=Remove
blockquote.shapes.upload.help=You can select multiple files. Supported extensions : .rdf, .ttl, .n3, .trig. Other extensions will be treated as RDF/XML
blockquote.shapes.catalog=Select from <a href="shapes-catalog">Shapes catalog</a>
blockquote.shapes.catalog.help=To have your Shapes in the catalog, add it to the <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/shapes-catalog.ttl">catalog Github repository</a>.
blockquote.shapes.url=URL
blockquote.shapes.url.placeholder=http://... (URL of SHACL file)
blockquote.shapes.url.help=URL of an RDF file. Same extensions as file upload are supported.
blockquote.shapes.inline=Copy/paste SHACL Rules content
blockquote.shapes.inline.help=Supported syntaxes : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. We recommend Turtle.


# Dataset/RDF selection blockquote labels
blockquote.data.upload=Upload
blockquote.data.upload.select=Select file
blockquote.data.upload.change=Change
blockquote.data.upload.remove=Remove
blockquote.data.upload.help=You can select multiple files. Supported extensions : .rdf, .ttl, .n3, .trig. Other extensions will be treated as RDF/XML. You can also send <em>zip files</em>.
blockquote.data.url=URL
blockquote.data.url.placeholder=http://... (URL of RDF file)
blockquote.data.url.help=URL of an RDF file. Same extensions as file upload are supported.
blockquote.data.inline=Copy/paste RDF content
blockquote.data.inline.help=Supported syntaxes : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. We recommend Turtle.


# SPARQL endpoint blockquote labels
blockquote.endpoint.sparql.url=URL of a SPARQL service
blockquote.endpoint.sparql.url.placeholder=http://... (URL of a SPARQL endpoint)
blockquote.endpoint.sparql.url.help=Must be a publicly accessible SPARQL endpoint, preferably without "too much" data (avoid trying with DBPedia or Wikidata, it will not work)


# Rules selection blockquote labels
blockquote.rules.upload=Upload
blockquote.rules.upload.select=Select file
blockquote.rules.upload.change=Change
blockquote.rules.upload.remove=Remove
blockquote.rules.upload.help=You can select multiple files. Supported extensions : .rdf, .ttl, .n3, .trig. Other extensions will be treated as RDF/XML
blockquote.rules.catalog=Select from <a href="rules-catalog">Rules catalog</a>
blockquote.rules.catalog.help=To have your RuleSet in the catalog, add it to the <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/rules-catalog.ttl">catalog Github repository</a>.
blockquote.rules.url=URL
blockquote.rules.url.placeholder=http://... (URL of SHACL Rules file)
blockquote.rules.url.help=URL of an RDF file. Same extensions as file upload are supported.
blockquote.rules.inline=Copy/paste SHACL Rules content
blockquote.rules.inline.help=Supported syntaxes : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. We recommend Turtle.


# Options blockquote labels
blockquote.options.title=Options


### SHACL forms labels ###


# Diagram/draw form labels
draw.title=Draw UML from SHACL
draw.shapes.title=Shapes
draw.options.format=Output format
draw.options.hideProperties=Hide data propertues
draw.options.hideProperties.help=Don't display anything inside the boxes, just keep the arrows to show the skeleton of the diagram
draw.submit=Draw


# Documentation form labels
doc.title=SHACL documentation
doc.shapes.title=Shapes
doc.options.language=Language of the generated documentation
doc.options.language.help=Enter a 2-letters language code. Labels and notes will be read in this language.
doc.options.includeDiagram=Include diagram in the generated documentation
doc.options.includeDiagram.help=Check if you want the UML diagram to be included in the generated documentation. Not all structure of Shapes file can produce a nice UML diagram.
doc.options.includeDiagram.entity=Include a diagram in each entity
doc.options.includeDiagram.entity.help=Check if you want the UML diagram to be included in the generated documentation.
doc.options.logo=Insert a logo
doc.options.logo.placeholder=http://... (URL of the logo)
doc.options.logo.help=The logo must be accessible at a URL. SVG is not supported if printed in PDF.
doc.options.format=Output format
doc.options.hideProperties= Hide Properties
doc.options.hideProperties.help=Not display properties
doc.options.printPDF=Print in PDF
doc.options.printPDF.help=(note: if included, diagram can be small in the PDF)
doc.submit=Generate doc


# SPARQL generation form labels
sparql.title=SPARQL Query generation
sparql.inputData.title=Shapes
sparql.targetOverride.title=Target override (optionnal)
sparql.targetOverride.upload=Upload
sparql.targetOverride.upload.select=Select file
sparql.targetOverride.upload.change=Change
sparql.targetOverride.upload.remove=Remove
sparql.targetOverride.upload.help=You can select multiple files. Supported extension : .ttl
sparql.targetOverride.url=URL
sparql.targetOverride.url.placeholder=http://... (URL of SHACL Rules file)
sparql.targetOverride.url.help=URL of an RDF file. Same extensions as file upload are supported.
sparql.targetOverride.inline=Copy/paste SHACL Rules content
sparql.targetOverride.inline.help=Supported syntaxe : Turtle. We recommend Turtle.
sparql.options.formatCombine=Single combined query
sparql.options.formatCombine.help=Generates a single query per initial target defined in the SHACL, using UNION clauses. By default, the process generates one query file per possible path in the shapes file.
sparql.submit=Generate SPARQL


# Context generation form labels
context.title=Generate a JSON-LD context
context.shapes.title=Shapes
context.submit=Generate

# Schema generation form labels
schema.title=Generate a JSON schema
schema.shapes.title=Shapes
schema.options.url=URI of the "root" NodeShape
schema.options.urlRoot.placeholder=NodeShape URI
schema.options.url.help=The URI of the Node Shape that will be used as root in the JSON schema generation
schema.submit=Generate

# Shacl Excel
shaclexcel.title=SHACL editor from Excel


### RDF dataset forms labels ###


# Validation form labels
validate.title=Validate RDF data
validate.title.validateWith=Validate with
validate.inputData.title=Input Data
validate.shapes.title=Shapes
validate.options.infer=Activate OWL-Micro inference before validation
validate.options.infer.help=Use this option if the data to be validated contains ontology triples and you need to apply <a href="https://jena.apache.org/documentation/inference/#owl">OWL-Micro inference</a> on the data before it is validated. /!\\ Inference can take a very long time
validate.options.closeShapes=Closed World (adds sh:closed to NodeShapes)
validate.options.closeShapes.help=Check this option to verify that each shape uses <em>only</em> properties explicitely declared in the shape file. \\
 In other words, this verify that are no misplaced properties, and ensures no properties other than those explicitely listed are present in the data. It makes validation operate in "closed world". \\
 Technically, this adds a <code>sh:closed true; sh:ignoreProperties (rdf:type);</code> on every NodeShape that is not closed already.
validate.options.createDetails=Include details
validate.options.createDetails.help=Enable this option to also include in the validation report the "root" cause of a validation result triggered by an sh:or, sh:and, sh:node or sh:qualifiedNodeShape.
validate.submit=Validate


# SHACL generation form labels
generate.title=Generate SHACL Profile
generate.data.title=Dataset
generate.sparql.title=SPARQL endpoint
generate.options.format=Output format
generate.options.statistics=Compute number of instances and occurrences
generate.options.statistics.help=/!\\ takes time ! Run additional queries to count the number of targets of each node shape, number of occurrences and number of distinct values of each property shape. Stores them on <a href="https://www.w3.org/TR/void/#class-property-partitions">void:classPartitions and void:propertyPartitions</a>, using <a href="https://www.w3.org/TR/void/#statistics">void:entities, void:triples and void:distinctObjects</a> predicates.
generate.options.generateLabels=Generate labels on the shapes
generate.options.generateLabels.help=Whether rdfs:label and sh:name should be derived on the shapes. Uncheck if you don't need them or you have other means to retrieve them (e.g. from an OWL file)
generate.submit=Generate


# Dataset documentation form label
analyze.title=Analyze a dataset
analyze.dataset.title=RDF to analyze
analyze.sparql.title=SPARQL endpoint
analyze.submit=Analyze
analyze.options.language=Language of the generated analysis
analyze.options.language.help=Enter a 2-letters language code. Labels and notes will be read in this language.
analyze.options.format=Output format


### Rules form labels ###


# Rules display form labels
rules.title=Rules documentation
rules.shapes.title=Rules
rules.submit=Print


# Conversion form labels
convert.title=Transform RDF data
convert.title.validateWith=Transform with
convert.inputData.title=Input Data
convert.shapes.title=Rules
convert.submit=Convert


### Catalog screens labels ###


# Shapes catalog labels
catalog.title=Shapes Catalog
catalog.entry.addedOn=Added on
catalog.entry.addedOn.by=by


# Rules catalog labels
catalog-rules.title=Rules Catalog
catalog-rules.entry.addedOn=Added on
catalog-rules.entry.addedOn.by=by