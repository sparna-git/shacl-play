# app name in the title
window.app=SHACL Play!


### Navbar and Home ###


# navbar labels, also used in home page cards
navbar.brand=SHACL Play!
navbar.menu1=Outils SHACL
navbar.menu1.doc.label=Générer une documentation
navbar.menu1.doc.tooltip=Générer une documentation de profil d'application, avec une table des propriétés pour chaque classe, à partir de votre définition SHACL. Une doc prête à envoyer aux développeurs !
navbar.menu1.draw.label=Générer un diagramme UML
navbar.menu1.draw.tooltip=Vous êtes du genre visuel ? Générez des diagrammes UML en SVG à partir de votre fichier SHACL ! Basé sur PlantUML.
navbar.menu1.context.label=Générer un @context JSON-LD
navbar.menu1.context.tooltip=Dérive les clés JSON à partir des NodeShapes et des PropertyShapes.
navbar.menu1.jsonschema.label=Génère un schema JSON
navbar.menu1.jsonschema.tooltip=Génère un schema JSON à partir d'une spécification SHACL
navbar.menu1.sparql.label=Générer des requêtes SPARQL
navbar.menu1.sparql.tooltip=Générer des requêtes SPARQL pour extraire un sous-ensemble de données conformes à une spécifications SHACL.
navbar.menu1.shaclexcel.label=Editer du SHACL (en Excel)
navbar.menu1.shaclexcel.tooltip=Utiliser un template de fichier Excel pour éditer du SHACL
navbar.menu1.shapes-catalog.label=Catalogue SHACL
navbar.menu1.shapes-catalog.tooltip=Le catalogue SHACL est un annuaire de fichiers SHACL réutilisables en ligne. Ajoutez le vôtre !
navbar.menu1.excel.label=Générer un Excel à partir du SHACL
navbar.menu1.excel.tooltip=Générer un fichier Excel contenant la spécification SHACL
navbar.menu2=Outils RDF
navbar.menu2.validate.label=Valider des données
navbar.menu2.validate.tooltip=Obtenez un rapport de validation de données RDF à partir de règles SHACL. Validez un RDF local ou des données RDF accessibles en ligne.
navbar.menu2.analyze.label=Analyser un jeu de données RDF
navbar.menu2.analyze.tooltip=Obtenez une documentation du contenu de votre jeu de données RDF, incluant le nombre d'instances de chaque classe, le nombre de propriétés et le nombre de valeurs distinctes pour chaque propriété.
navbar.menu2.generate.label=Générer du SHACL
navbar.menu2.generate.tooltip=Générer notre specification SHACL à partir de un jeu de données RDF.
navbar.menu2.badge.label=Générer un badge de validation
navbar.menu2.badge.tooltip=Si votre fichier SHACL est enregistré dans le catalogue de Shapes et que vous validez un RDF en ligne, récupérez un code d'affichage de badge de validation pour votre projet Github !.
navbar.menu3=Outils SHACL Rules
navbar.menu3.from-owl.label=Convertir du RDF à partir de règles
navbar.menu3.from-owl.tooltip=Vous pouvez dériver des règles SHACL à partir d'une ontologie OWL. Vous pouvez aussi appliquer des règles custom.
navbar.menu3.rules.label=Afficher un jeu de règles
navbar.menu3.rules.tooltip=Générer une documentation HTML à partir d'un fichier contenant des règles SHACL rules.
navbar.menu3.rules-catalog.label=Catalogue SHACL Rules
navbar.menu3.rules-catalog.tooltip=Le catalogue SHACL Rules est un annuaire de fichiers SHACL Rules réutilisables en ligne. Ajoutez le vêtre !


# home labels
home.shortdesc=SHACL Play! de <a href="http://sparna.fr/">Sparna</a> est une suite d'outils gratuite pour travailler avec <a href="https://www.w3.org/TR/shacl/" target="_blank">SHACL</a>. SHACL Play! intègre l'<a href="https://github.com/TopQuadrant/shacl" target="_blank">l'API SHACL</a> de <a href="https://www.topquadrant.com/" target="_blank">TopQuadrant</a>.<br /> SHACL Play! est <a href="https://github.com/sparna-git/shacl-play" target="_blank">open-source et sur Github</a>.
home.card1.title=Outils SHACL
home.card1.description=Travailler à partir d'un fichier de spécifications SHACL : Générer une doc, un diagramme, un fichier de context, des requêtes SPARQL d'extraction
home.card2.title=Outils RDF
home.card2.description=Travailler à partir d'un jeu de données RDF : valider la conformité par rapport à un fichier SHACL, dériver automatiquement un profil SHACL.
home.card3.title=Outils SHACL Rules
home.card3.description=Travailler à partir de <a href="https://www.w3.org/TR/shacl-af/#rules">SHACL rules</a> : convertir des données RDF avec des règles, afficher des règles.


### Blockquotes labels, reusable in multiple pages ###

# Shape selection blockquote labels
blockquote.shapes.upload=Uploader
blockquote.shapes.upload.select=Sélectionner un fichier
blockquote.shapes.upload.change=Modifier
blockquote.shapes.upload.remove=Annuler
blockquote.shapes.upload.help=Vous pouvez sélectionnez plusieurs fichiers. Extensions supportées : .rdf, .ttl, .n3, .trig ou <em>.zip</em>. <span style="color: #ff8181;">Excel est également supporté</span> (voir <a href="shaclexcel">SHACL in Excel</a>).
blockquote.shapes.catalog=Sélectionner dans le <a href="shapes-catalog">catalogue de shapes</a>
blockquote.shapes.catalog.help=Pour que votre SHACL apparaisse dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/shapes-catalog.ttl">catalogue dans Github</a>.
blockquote.shapes.url=URL
blockquote.shapes.url.placeholder=http://... (URL du fichier SHACL)
blockquote.shapes.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
blockquote.shapes.inline=Copier/coller les règles SHACL
blockquote.shapes.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.


# Dataset/RDF selection blockquote labels
blockquote.data.upload=Uploader
blockquote.data.upload.select=Sélectionner un fichier
blockquote.data.upload.change=Modifier
blockquote.data.upload.remove=Annuler
blockquote.data.upload.help=Vous pouvez sélectionnez plusieurs fichiers. Extensions supportées : .rdf, .ttl, .n3, .trig ou <em>.zip</em>. <span style="color: #ff8181;">Excel est également supporté</span> en respectant la <a href="https://xls2rdf.sparna.fr">structure xls2rdf</a>.
blockquote.data.url=URL
blockquote.data.url.placeholder=http://... (URL du fichier RDF)
blockquote.data.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
blockquote.data.inline=Copier/coller le RDF
blockquote.data.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.


# SPARQL endpoint blockquote labels
blockquote.endpoint.sparql.url=URL d'un service SPARQL
blockquote.endpoint.sparql.url.placeholder=http://... (URL d'un service SPARQL)
blockquote.endpoint.sparql.url.help=Adresse d'un SPARQL endpoint public, de préférence sans trop de données (n'essayez pas avec DBPedia ni Wikidata, ? ne marchera pas)


# Rules selection blockquote labels
blockquote.rules.upload=Uploader
blockquote.rules.upload.select=Sélectionner un fichier
blockquote.rules.upload.change=Modifier
blockquote.rules.upload.remove=Annuler
blockquote.rules.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .rdf, .ttl, .n3, .trig. Les autres extensions seront considérées comme du RDF/XML
blockquote.rules.catalog=Sélectionner dans le <a href="rules-catalog">catalogue de règles</a>
blockquote.rules.catalog.help=Pour que votre SHACL apparaisse dans la liste, éditez directement le <a target="_blank" href="https://github.com/sparna-git/SHACL-Catalog/blob/master/rules-catalog.ttl">catalogue dans Github</a>.
blockquote.rules.url=URL
blockquote.rules.url.placeholder=http://... (URL du fichier SHACL)
blockquote.rules.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
blockquote.rules.inline=Copier/coller les règles SHACL
blockquote.rules.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.


# Options blockquote labels
blockquote.options.title=Options


### SHACL forms labels ###


# Diagram/draw form labels
draw.title=Dessiner mon SHACL en UML
draw.shapes.title=Shapes
draw.options.format=Format
draw.options.hideProperties=Cacher les propriétés data
draw.options.hideProperties.help=Masque les propriétés dans les boites pour ne montrer que la structure du graphe avec les flèches
draw.submit=Dessiner


# Documentation form labels
doc.title=Générer une documentation SHACL
doc.shapes.title=Shapes
doc.options.language=Langue de la documentation
doc.options.language.help=Entrez un code de langue à 2 lettres. Les labels/notes seront lus dans cette langue
doc.options.includeDiagram=Inclure le diagramme UML dans la documentation
doc.options.includeDiagram.help=Vous pouvez inclure un diagramme UML dans le fichier de documentation produit. Cependant tous les fichiers SHACL ne permettent pas de produire de beaux diagrammes UML.
doc.options.sectionDiagram=Inclure le diagramme UML pour chaque entité
doc.options.sectionDiagram.help=Vous pouvez inclure un diagramme UML dans chaque section de la documentation.
doc.options.logo=Insérez un logo
doc.options.logo.placeholder=http://... (URL du fichier)
doc.options.logo.help=Le logo doit être accessible à une URL. Le format SVG n'est pas supporté pour la génération de PDF
doc.options.format=Format
doc.options.hideProperties=Cacher les propriétés data
doc.options.hideProperties.help=Masque les propriétés dans les boites pour ne montrer que la structure du graphe avec les flèches
doc.options.printPDF=Imprimer en PDF
doc.options.printPDF.help=(note : les diagrammes UML peuvent être un peu petits dans le PDF)
doc.submit=Générer la doc


# SPARQL generation form labels
sparql.title=Requêtes SPARQL 
sparql.inputData.title=Shapes
sparql.targetOverride.title=Surcharge des targets (optionnel)
sparql.targetOverride.upload=Uploader
sparql.targetOverride.upload.select=Sélectionner un fichier
sparql.targetOverride.upload.change=Modifier
sparql.targetOverride.upload.remove=Annuler
sparql.targetOverride.upload.help=Vous pouvez sélectionnez plusieurs fichiers d'un coup. Extensions supportées : .ttl
sparql.targetOverride.url=URL
sparql.targetOverride.url.placeholder=http://... (URL du fichier de règles)
sparql.targetOverride.url.help=URL d'un fichier RDF valide - supporte les mêmes extensions que l'upload ci-dessus.
sparql.targetOverride.inline=Copier/coller les règles SHACL
sparql.targetOverride.inline.help=Syntaxes supportées : Turtle, RDF/XML, JSON-LD, TriG, TriX, N-Quads. Privilégiez Turtle.
sparql.options.formatCombine=Une seule requête combinée
sparql.options.formatCombine.help=génère une requête par target en utilisant la clause UNION. Par défaut, le processus génère un fichier pour chaque chemin possible dans les Shapes 
sparql.submit=Générer le SPARQL


# Context generation form labels
context.title=Générer un JSON-LD
context.shapes.title=Shapes
context.submit=Générer

# Schema generation form labels
schema.title=Générer un JSON schema
schema.shapes.title=Shapes
schema.options.url=URI de la NodeShape principale
schema.options.urlRoot.placeholder=Cliquez ici pour lister les URI des NodeShapes de votre fichier SHACL...
schema.options.url.help=URI de la Node Shape qui sera utilisé comme point d'entrée pour la génération du schema JSON. Sélectionnez d'abord votre fichier SHACL ci-dessus, puis cliquez sur la liste déroulante pour charger les URI des NodeShapes.
schema.options.context=Contexte JSON-LD
schema.options.context.help=Le contexte JSON-LD utilisé par le JSON pour lequel le JSON schema est généré. Exactement comme la valeur qui serait mise dans le champ "@context" du JSON-LD (sans "@context" lui-même).
schema.options.ignoreProperties=Ignorer les constantes dans le fichier SHACL (sh:in et sh:hasValue)
schema.options.ignoreProperties.help=Cette option est utile lorsque la spécification SHACL contient des valeurs ou des listes de valeurs qui peuvent évoluer. En n'incluant pas ces valeurs dans le schema généré, celles-ci peuvent évoluer sans impacter les utilisateurs du schema JSON.
schema.options.optAddProperties=Ne jamais mettre additionalProperties à false.
schema.options.optAddProperties.help=Cette propriété est utile lorsque le schema peut évoluer et que des nouvelles propriétés peuvent être ajoutées. Les nouvelles entités avec ces nouvelles propriétés ne généreront pas d'erreur pour les utilisateurs des anciennes version du schema.
schema.submit=Générer

# Shacl Excel
shaclexcel.title=Editeur SHACL en Excel


### RDF dataset forms labels ###


# Validation form labels
validate.title=Validation RDF
validate.title.validateWith=Valider avec
validate.inputData.title=RDF à valider
validate.shapes.title=Shapes
validate.options.infer=Activer l'inférence OWL-Micro avant validation
validate.options.infer.help=Si les données à valider contiennent l'ontologie, vous pouvez activer une <a href="https://jena.apache.org/documentation/inference/#owl">inférence OWL-Micro</a> sur les données avant d'exécuter la validation. /!\\ l'inférence peut être très longue
validate.options.closeShapes=Monde fermé (ajoute sh:closed sur les NodeShape)
validate.options.closeShapes.help=Cette option vérifie que chaque Shape porte <em>seulement</em> les propriétés déclarées explicitement dans le fichier de Shapes. \
 En d'autres termes, cela vérifie que les propriétés sont "bien placées" sur leur domaine, et qu'aucune autre propriété que celles explicitement listées n'est présente dans les données. La validation opère en "monde fermé". \
 Techniquement, cette option ajoute <code>sh:closed true; sh:ignoreProperties (rdf:type);</code> sur toutes les NodeShape qui ne sont pas déjà fermées.
validate.options.createDetails=Inclure les détails
validate.options.createDetails.help=Activer cette option pour inclure dans le rapport de validation les causes des violations génèrées par les sh:or, sh:and, sh:node or sh:qualifiedValueShape
validate.options.avoidResolveTargets=Pas de résolution des cibles
validate.options.avoidResolveTargets.help=Par défaut, SHACL Play! calcule les cibles ("targets") de chaque NodeShape. Cela permet de vérifier que chaque ressource dans les données a été ciblée \
 par au moins une NodeShape, et permet de vérifier les contraintes <code>sh:minCount</code> and <code>sh:maxCount</code> sur les NodeShapes. Ces résultats sont ajoutés dans le rapport de validation comme des résultats supplémentaires. \
 Ce process peut prendre du temps. Si vous voulez désactiver cette étape, activez cette opion.
validate.submit=Valider


# SHACL generation form labels
generate.title=Générer un profil SHACL
generate.data.title=Dataset
generate.sparql.title=SPARQL endpoint
generate.options.format=Format de sortie
generate.options.statistics=Compter les instances/occurrences
generate.options.statistics.help=/!\\ prend du temps ! Exéute une analyse supplémentaire pour compter le nombre de targets de chaque <em>node shape</em>, le nombre d'occurrences et le nombre de valeurs distinctes de chaque <em>property shape</em>. Exprime le résultat dans des <a href="https://www.w3.org/TR/void/#class-property-partitions">void:classPartitions et void:propertyPartitions</a>, en utilisant les prédicats <a href="https://www.w3.org/TR/void/#statistics">void:entities, void:triples et void:distinctObjects</a>.
generate.options.generateLabels=Générer des libellés de shapes
generate.options.generateLabels.help=Indique si des rdfs:label et des sh:name doivent etre générés sur les shapes à partir des URI. Décochez si vous avez un autre moyen de récupérer ces libellés (e.g. à partir d'un OWL)
generate.submit=Générer


# Dataset documentation form label
analyze.title=Analyser un jeu de données
analyze.dataset.title=RDF a analyser
analyze.sparql.title=SPARQL endpoint
analyze.shapes.title=Shapes (optionnelles)
analyze.submit=Analyser
analyze.options.language=Langue de la documentation
analyze.options.language.help=Entrez un code de langue ? 2 lettres. Les labels/notes seront lus dans cette langue
analyze.options.format=Format de sortie


### Rules form labels ###


# Rules display form labels
rules.title=Afficher des règles
rules.shapes.title=règles
rules.submit=Afficher


# Conversion form labels
convert.title=Transformation RDF
convert.title.convertWith=Transformer avec
convert.inputData.title=RDF à transformer
convert.shapes.title=règles
convert.submit=Convertir


### Catalog screens labels ###


# Shapes catalog labels
catalog.title=Catalogue de Shapes
catalog.entry.addedOn=Ajouté le
catalog.entry.addedOn.by=par


# Rules catalog labels
catalog-rules.title=Catalogue de règles
catalog-rules.entry.addedOn=Ajouté le
catalog-rules.entry.addedOn.by=par

# SHACL in Excel form labels
excel.title=Transformer mon SHACL en Excel
excel.submit=Récupérer l'Excel